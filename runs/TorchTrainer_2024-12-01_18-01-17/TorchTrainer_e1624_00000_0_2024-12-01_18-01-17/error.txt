Failure # 1 (occurred at 2024-12-01_18-01-43)
[36mray::_Inner.train()[39m (pid=109903, ip=172.26.204.107, actor_id=273212db1d3edbfffb77fb9e01000000, repr=TorchTrainer)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/fahad/study/kserving/.venv/lib/python3.12/site-packages/ray/tune/trainable/trainable.py", line 331, in train
    raise skipped from exception_cause(skipped)
  File "/home/fahad/study/kserving/.venv/lib/python3.12/site-packages/ray/train/_internal/utils.py", line 57, in check_for_failure
    ray.get(object_ref)
           ^^^^^^^^^^^^^^^^^^^
           ^^^^^^^^^^^^^^^^^^^^^
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ray.exceptions.OutOfMemoryError: Task was killed due to the node running low on memory.
Memory on the node (IP: 172.26.204.107, ID: 9969b2ae2f64a0d022a23364b5a8d1896555b6d7a0df38e75fa91522) where the task (actor ID: e9a12a5b2fe01c96f18ac58801000000, name=RayTrainWorker.__init__, pid=110099, memory used=2.59GB) was running was 7.58GB / 7.62GB (0.994385), which exceeds the memory usage threshold of 0.95. Ray killed this worker (ID: dccb1415dee9f53e0c7528dcbc4ec1640da8c2b2b82690c475d75d4d) because it was the most recently scheduled task; to see more information about memory usage on this node, use `ray logs raylet.out -ip 172.26.204.107`. To see the logs of the worker, use `ray logs worker-dccb1415dee9f53e0c7528dcbc4ec1640da8c2b2b82690c475d75d4d*out -ip 172.26.204.107. Top 10 memory users:
PID	MEM(GB)	COMMAND
110099	2.59	ray::_RayTrainWorker__execute.get_next
109903	0.39	ray::_Inner.train
100498	0.29	/home/fahad/study/kserving/.venv/bin/python3 /home/fahad/study/kserving/.venv/lib/python3.12/site-pa...
100340	0.27	python3 model/train.py
63979	0.25	/home/fahad/.vscode-server/bin/f1a4fb101478ce6ec82fe9627c43efbf9e98c813/node --dns-result-order=ipv4...
100424	0.24	/home/fahad/study/kserving/.venv/lib/python3.12/site-packages/ray/core/src/ray/gcs/gcs_server --log_...
100603	0.19	/home/fahad/study/kserving/.venv/lib/python3.12/site-packages/ray/core/src/ray/raylet/raylet --rayle...
100496	0.13	/home/fahad/study/kserving/.venv/bin/python3 -u /home/fahad/study/kserving/.venv/lib/python3.12/site...
100604	0.12	/home/fahad/study/kserving/.venv/bin/python3 -u /home/fahad/study/kserving/.venv/lib/python3.12/site...
100693	0.08	/home/fahad/study/kserving/.venv/bin/python3 -u /home/fahad/study/kserving/.venv/lib/python3.12/site...
Refer to the documentation on how to address the out of memory issue: https://docs.ray.io/en/latest/ray-core/scheduling/ray-oom-prevention.html. Consider provisioning more memory on this node or reducing task parallelism by requesting more CPUs per task. Set max_restarts and max_task_retries to enable retry when the task crashes due to OOM. To adjust the kill threshold, set the environment variable `RAY_memory_usage_threshold` when starting Ray. To disable worker killing, set the environment variable `RAY_memory_monitor_refresh_ms` to zero.
